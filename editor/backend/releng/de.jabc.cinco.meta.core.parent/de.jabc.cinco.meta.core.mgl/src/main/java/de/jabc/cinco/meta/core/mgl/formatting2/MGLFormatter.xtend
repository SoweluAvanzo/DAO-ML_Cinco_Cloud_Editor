/*
 * generated by Xtext 2.22.0
 */
package de.jabc.cinco.meta.core.mgl.formatting2

import com.google.inject.Inject
import de.jabc.cinco.meta.core.mgl.services.MGLGrammarAccess
import mgl.GraphModel
import mgl.MGLModel
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class MGLFormatter extends AbstractFormatter2 {
	
	@Inject extension MGLGrammarAccess

	def dispatch void format(MGLModel mGLModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (_import : mGLModel.imports) {
			_import.format
		}
		for (_annotation : mGLModel.annotations) {
			_annotation.format
		}
		for (graphModel : mGLModel.graphModels) {
			graphModel.format
		}
		for (node : mGLModel.nodes) {
			node.format
		}
		for (edge : mGLModel.edges) {
			edge.format
		}
		for (type : mGLModel.types) {
			type.format
		}
	}

	def dispatch void format(GraphModel graphModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (_annotation : graphModel.annotations) {
			_annotation.format
		}
		for (graphicalElementContainment : graphModel.containableElements) {
			graphicalElementContainment.format
		}
		for (wildcard : graphModel.containmentWildcards) {
			wildcard.format
		}
		for (attribute : graphModel.attributes) {
			attribute.format
		}
	}
	
	// TODO: implement for PrimitiveAttribute, ComplexAttribute, Edge, Node, OrConstraint, NodeContainer, Enumeration, UserDefinedType, ReferencedEClass, ReferencedModelElement
}
