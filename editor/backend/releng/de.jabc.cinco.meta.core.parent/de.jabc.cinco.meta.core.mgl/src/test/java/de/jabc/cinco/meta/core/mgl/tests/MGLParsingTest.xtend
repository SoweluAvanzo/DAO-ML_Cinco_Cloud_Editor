/*
 * generated by Xtext 2.23.0
 */
package de.jabc.cinco.meta.core.mgl.tests

import com.google.inject.Inject
import mgl.MGLModel
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import de.jabc.cinco.meta.core.mgl.tests.MGLInjectorProvider;

@ExtendWith(InjectionExtension)
@InjectWith(MGLInjectorProvider)
class MGLParsingTest {
	@Inject
	ParseHelper<MGLModel> parseHelper
	
	@Test
	def void loadModel() {
		val testFile = getExample();
		val result = parseHelper.parse(testFile)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	def String getExample() {
		val classLoader = getClass().getClassLoader
		val file = classLoader.getResource("FlowGraph.mgl").toURI
		val p = java.nio.file.Paths.get(file);
		return java.nio.file.Files.readString(p);
	}
}