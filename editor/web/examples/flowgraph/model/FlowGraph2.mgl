id info.scce.cinco.product.flowgraph2
stylePath "model/FlowGraph.style"

@primeviewer
@postCreate("info.scce.cinco.product.flowgraph.hooks.InitializeFlowGraphModel")
graphModel FlowGraphDiagram2 {
	iconPath "icons/FlowGraph.png"
	diagramExtension "flowgraph"
	
	containableElements(Start2, End2, Activity2, Swimlane2, SubFlowGraph2)
	
	attr EString as modelName
}

@icon("icons/Start.png")
@palette("Round Elements")
node Start2 {
	style greenCircle
	
	// allow exactly one outgoing Transition
	outgoingEdges (Transition2[1,1])
}	

@icon("icons/End.png")
@palette("Round Elements")
node End2 {
	style redCircle
	
	/*
	
	allow an arbitrary number (>0) of incoming edges
	
	the following would have been valid as well, meaning the same:
	  incomingEdges (*[1,*])
	
	*/
	incomingEdges ({Transition2,LabeledTransition2}[1,*])
}

@icon("icons/Activity.png")
@palette("Rectangular Elements")
node Activity2 {
	// use the "blueTextRectangle" as this node's style and pass the attribute "name" as a parameter
	style blueTextRectangle("${name}")
	
	attr EString as name
	attr EString as description
	incomingEdges (*[1,*])
	outgoingEdges (LabeledTransition2[1,*])
}

node SubFlowGraph2 {
	style greenTextRectangle("${subFlowGraph.modelName}")
	
	prime this::FlowGraphDiagram2 as subFlowGraph
	incomingEdges (*[1,*])
	outgoingEdges (LabeledTransition2[1,*])
}

@icon("icons/Swimlane.png")
@palette("Rectangular Elements")
container Swimlane2 {
	style swimlane("${actor}")
	
	attr EString as actor
	containableElements (Start2[1,1], Activity2, End2, SubFlowGraph2)
}

edge Transition2 {
	style simpleArrow
}

edge LabeledTransition2 {
	style labeledArrow("${label}")
	
	attr EString as label
}
