stylePath "FlowGraph.style"

// TODO: @GeneratorAction(FlowGraphGenerator)
graphModel FlowGraphDiagram {
	// TODO: iconPath "flowgraph/icons/FlowGraph.png"
	diagramExtension "flowgraph"
	
	containableElements(Start, End, Activity, Swimlane, ExternalActivity)
	
	attr string as modelName
}

@icon("flowgraph/icons/Start.png")
@palette("Round Elements")
node Start {
	style greenCircle
	
	// allow exactly one outgoing Transition
	outgoingEdges (Transition[1,1])
}	

@icon("flowgraph/icons/End.png")
@palette("Round Elements")
node End{
	style redCircle
	
	/*
	
	allow an arbitrary number (>0) of incoming edges
	
	the following would have been valid as well, meaning the same:
	  incomingEdges (*[1,*])
	
	*/
	incomingEdges ({Transition,LabeledTransition}[1,*])
}

@icon("flowgraph/icons/Activity.png")
@palette("Rectangular Elements")
node Activity {
	// use the "blueTextRectangle" as this node's style and pass the attribute "name" as a parameter
	style blueTextRectangle("${name}")
	
	incomingEdges ({Transition,LabeledTransition}[1,*])
	outgoingEdges (LabeledTransition[1,*])

	attr string as name
	attr string as description
}

node ExternalActivity {
	style greenTextRectangle("${activity.name}")

	incomingEdges ({Transition,LabeledTransition}[1,*])
	outgoingEdges (LabeledTransition[1,*])
}

@icon("flowgraph/icons/Swimlane.png")
@palette("Rectangular Elements")
container Swimlane {
	style swimlane("${actor}")

	containableElements (Start[1,1], Activity, End, ExternalActivity)
	
	attr string as actor
}

edge Transition {
	style simpleArrow
}

edge LabeledTransition {
	style labeledArrow("${label}")
	
	attr string as label
}
