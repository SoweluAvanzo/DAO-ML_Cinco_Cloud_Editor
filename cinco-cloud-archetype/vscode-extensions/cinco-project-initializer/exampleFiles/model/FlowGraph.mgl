import "model/ExternalLibrary.ecore" as externalLibrary

id info.scce.cinco.product.flowgraph
stylePath "FlowGraph.style"

@primeviewer
@generatable("info.scce.cinco.product.flowgraph.codegen.Generate","/src-gen/")
@postCreate("info.scce.cinco.product.flowgraph.hooks.InitializeFlowGraphModel")
@mcam("check")
graphModel FlowGraphDiagram {
	iconPath "icons/FlowGraph.png"
	diagramExtension "flowgraph"
	
	containableElements(Start, End, Activity, Swimlane, ExternalActivity, SubFlowGraph)
	
	attr String as modelName
}

@contextMenuAction("info.scce.cinco.product.flowgraph.action.ShortestPathToEnd")
@doubleClickAction("info.scce.cinco.product.flowgraph.action.ShortestPathToEnd")
@icon("icons/Start.png")
@palette("Round Elements")
node Start {
	style greenCircle
	
	// allow exactly one outgoing Transition
	outgoingEdges (Transition[1,1])
}	

@icon("icons/End.png")
@palette("Round Elements")
node End{
	style redCircle
	
	/*
	
	allow an arbitrary number (>0) of incoming edges
	
	the following would have been valid as well, meaning the same:
	  incomingEdges (*[1,*])
	
	*/
	incomingEdges ({Transition,LabeledTransition}[1,*])
}

@icon("icons/Activity.png")
@palette("Rectangular Elements")
@postCreate("info.scce.cinco.product.flowgraph.hooks.RandomActivityName")
node Activity {
	// use the "blueTextRectangle" as this node's style and pass the attribute "name" as a parameter
	style blueTextRectangle("${name}")
	
	incomingEdges ({Transition,LabeledTransition}[1,*])
	outgoingEdges (LabeledTransition[1,*])

	attr String as name
	attr String as description
}

node ExternalActivity {
	style greenTextRectangle("${activity.name}")

	incomingEdges ({Transition,LabeledTransition}[1,*])
	outgoingEdges (LabeledTransition[1,*])
	
	// @pvLabel(name)
	// @pvFileExtension("elib")
	// prime externalLibrary.ExternalActivity as activity
}

@jumpToPrime
node SubFlowGraph {
	style greenTextRectangle("${subFlowGraph.modelName}")
	
	incomingEdges ({Transition,LabeledTransition}[1,*])
	outgoingEdges (LabeledTransition[1,*])

	// prime this::FlowGraphDiagram as subFlowGraph
}

@icon("icons/Swimlane.png")
@palette("Rectangular Elements")
container Swimlane {
	style swimlane("${actor}")

	containableElements (Start[1,1], Activity, End, ExternalActivity, SubFlowGraph)
	
	attr String as actor
}

edge Transition {
	style simpleArrow
}

edge LabeledTransition {
	style labeledArrow("${label}")
	
	attr String as label
}
