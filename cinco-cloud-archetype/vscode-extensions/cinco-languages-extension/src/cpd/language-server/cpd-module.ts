import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices
} from 'langium';
import { CpdGeneratedModule, CincoGeneratedSharedModule } from '../../generated/module';
import { CpdValidator, registerValidationChecks } from './cpd-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type CpdAddedServices = {
    validation: {
        CpdValidator: CpdValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type CpdServices = LangiumServices & CpdAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const CpdModule: Module<CpdServices, PartialLangiumServices & CpdAddedServices> = {
    validation: {
        CpdValidator: () => new CpdValidator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createCpdServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Cpd: CpdServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        CincoGeneratedSharedModule
    );
    const Cpd = inject(
        createDefaultModule({ shared }),
        CpdGeneratedModule,
        CpdModule
    );
    shared.ServiceRegistry.register(Cpd);
    registerValidationChecks(Cpd);
    return { shared, Cpd };
}
