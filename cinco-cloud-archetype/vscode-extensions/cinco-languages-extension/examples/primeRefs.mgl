
import "../example/example.mgl" as example
stylePath "primeRef.style" 

graphModel PrimeRefModel {
    diagramExtension "prime"
    containableElements (Type, Type2, PrimeNode, PrimeEdge, PrimeModel, PrimeNode2, PrimeReflection, ExternalPrimeModel)
}

container Type {
	style typeStyle("Type1 ${name}")  
    incomingEdges(Relation)
    outgoingEdges(Relation) 
    containableElements (Type)

    attr string as name

    @multiline
    attr string as documentation
}

container Type2 {
	style typeStyle("Type2 ${name}")  
    incomingEdges(Relation)
    outgoingEdges(Relation) 
    containableElements (Type)

    attr string as name

    @multiline
    attr string as documentation
}

edge Relation {  
	style eStyle("${Type}")
    attr RelationsType as Type 

    @multiline
    attr string as documentation
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node PrimeNode { 
	style typeStyle("PrimeNode ${name}") 
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime this::Type as Z_LIBRARY_Node
    attr string as name
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node PrimeNode2 { 
	style typeStyle("PrimeNode2 ${name}") 
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime this::Type2 as Z_LIBRARY_Node
    attr string as name
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node PrimeReflection { 
	style typeStyle("PrimeRefl ${name}") 
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime this::PrimeNode as Z_LIBRARY_Reflection
    attr string as name
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node PrimeEdge { 
	style typeStyle("PrimeEdge${name}") 
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime this::Relation as Z_LIBRARY_Edges
    attr string as name
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node PrimeModel { 
	style typeStyle("PrimeModel ${name}")
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime this::PrimeRefModel as Z_LIBRARY_Model
    attr string as name
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node ExternalPrimeModel { 
	style typeStyle("External PrimeModel ${name}")
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime example::Model as Z_LIBRARY_External_Model
    attr string as name
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node PrimeBaseGraphModel { 
	style typeStyle("GraphModel Prime ${name}")
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime GraphModel as Z_LIBRARY_GraphModels
    attr string as name
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node PrimeBaseNode { 
	style typeStyle("Node Prime ${name}")
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime Node as Z_LIBRARY_Nodes
    attr string as name
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node PrimeBaseContainer { 
	style typeStyle("Edge Prime ${name}")
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime Container as Z_LIBRARY_Containers
    attr string as name
}

@Hook(PrimeHooks, PostDoubleClick, CanDoubleClick)
node PrimeBaseEdge { 
	style typeStyle("Edge Prime ${name}")
    incomingEdges(Relation)
    outgoingEdges(Relation)

    prime Edge as Z_LIBRARY_Edges
    attr string as name
}

enum RelationsType {
    consistsOf
    relatesTo
    satisfies
    isA 
}
