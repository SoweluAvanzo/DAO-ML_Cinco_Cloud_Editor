id info.scce.rig
stylePath "model/Pipeline.style"

//@generatable("info.scce.rig.generator.GitLabCIGenerator", "/src-gen")
@mcam("check")
@mcam_checkmodule("info.scce.rig.checks.ReachabilityCheck")
@mcam_checkmodule("info.scce.rig.checks.UniqueNamesCheck")
@mcam_checkmodule("info.scce.rig.checks.CycleCheck")
graphModel Pipeline {
	diagramExtension "rig"
	
	containableElements (
		  Job       [1, *]
		, Target    [1, *]
		, Variable  [0, *]
		, Slottable [0, *]
		, Note      [0, *]
	)
	
	@propertiesViewHidden
	attr StageAssignmentStrategy as stageAssignmentStrategy := AS_EARLY_AS_POSSIBLE
	
	attr EBoolean as stageless := false
	attr EnvVariable as environmentVariable [0, *] // variables doesn't work
}

enum StageAssignmentStrategy {
	AS_EARLY_AS_POSSIBLE
	AS_LATE_AS_POSSIBLE
}

@label(name)
type EnvVariable {
	attr EString as name := "CI_VARIABLE"
	attr EString as value := ""
}

// meta

abstract container Slottable {
	@readOnly
	@propertiesViewHidden
	attr EBoolean as minimized := false
	
	incomingEdges (NoteAnchor [0, *])
}

abstract node Slot { }

edge NoteAnchor {
	style NoteAnchor
}

// pipeline

@palette("Workflow")
@icon("assets/icons/tasks-16x24.png")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@postCreate("info.scce.rig.hooks.PostCreateJob")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@contextMenuAction("info.scce.rig.hooks.job.AddArgument")
@contextMenuAction("info.scce.rig.hooks.job.AddImage")
@contextMenuAction("info.scce.rig.hooks.job.AddService")
@contextMenuAction("info.scce.rig.hooks.job.AddExcept")
@contextMenuAction("info.scce.rig.hooks.job.AddOnly")
@contextMenuAction("info.scce.rig.hooks.job.AddCoverage")
@contextMenuAction("info.scce.rig.hooks.job.AddAllowFailure")
@contextMenuAction("info.scce.rig.hooks.job.AddInterruptible")
@contextMenuAction("info.scce.rig.hooks.job.AddParallel")
@contextMenuAction("info.scce.rig.hooks.job.AddRetry")
@contextMenuAction("info.scce.rig.hooks.job.AddTimeout")
@contextMenuAction("info.scce.rig.hooks.job.AddResourceGroup")
@contextMenuAction("info.scce.rig.hooks.job.AddTag")
container Job extends Slottable {
	style Job("${name}")
	
	attr EString as name
	
	@readOnly
	attr EInt as stageIdx := "0"
	
	@multiLine
	attr EString as script := "echo 'Hello, World!'"
	
	@multiLine
	attr EString as after_script
	
	@multiLine
	attr EString as before_script
	
	containableElements (
		  AllowFailure   [0, 1]
		, Coverage       [0, 1]
		, SimpleImage    [0, 1]
		, Interruptible  [0, 1]
		, Parallel       [0, 1]
		, ResourceGroup  [0, *]
		, SimpleRetry    [0, 1]
		, SimpleService  [0, *]
		, Tag            [0, *]
		, Timeout        [0, 1]
		, When           [0, 1]
		, SimpleOnly     [0, *]
		, SimpleExcept   [0, *]
		, ScriptArgument [0, *]
	)
	
	outgoingEdges (Next [1, *])
	incomingEdges (
		  Next [0, *]
		, ArtifactAssignment    [0, 1]
		, CacheAssignment       [0, 1]
		, EnvironmentAssignment [0, *]
		, ImageAssignment       [0, 1]
		, ServiceAssignment     [0, *]
		, RetryAssignment       [0, 1]
		, ReleaseAssignment     [0, 1]
		, ExceptOnlyAssignment  [0, *]
		, RuleAssignment        [0, *]
//			, OnStopJobAssignment   [0, *]
	)
}


@postCreate("info.scce.rig.hooks.PostCreateNext")
@preDelete("info.scce.rig.hooks.PreDeleteNext")
edge Next {
	style Next
}

@palette("Workflow")
@icon("assets/icons/flag-checkered-16x24.png")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@postCreate("info.scce.rig.hooks.PostCreateTarget")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@contextMenuAction("info.scce.rig.hooks.tar.AddString")
@contextMenuAction("info.scce.rig.hooks.tar.AddBoolean")
@contextMenuAction("info.scce.rig.hooks.tar.AddInt")
@contextMenuAction("info.scce.rig.hooks.tar.AddImage")
@contextMenuAction("info.scce.rig.hooks.tar.AddService")
@contextMenuAction("info.scce.rig.hooks.tar.AddExcept")
@contextMenuAction("info.scce.rig.hooks.tar.AddOnly")
container Target extends Slottable {
	style Target ("${name}")
	
	attr EString as name := ""
	
	containableElements ( 
		  Parameter     [0, *]
		, SimpleImage   [0, 1]
		, SimpleService [0, *]
		, SimpleOnly    [0, *]
		, SimpleExcept  [0, *]
	)
	
	incomingEdges (
		  Next                 [1, *]
		, ExceptOnlyAssignment [0, *] 
		, RuleAssignment       [0, *]
		, ImageAssignment      [0, 1]
		, ServiceAssignment    [0, *]
	)
}


@palette("Workflow")
@icon("assets/icons/paperclip-solid-16x24.png")
node Note {
	style Note("${note}")
	
	@multiLine
	attr EString as note
	
	@color(rgb)
	attr EString as color := "255,243,205"
	
	outgoingEdges (NoteAnchor [0, *])
}


// variables

abstract node Variable {
	incomingEdges (NoteAnchor [0, *])
}

@palette("Parameterization")
@icon("assets/icons/play-circle-16x24.png")
@postResize("info.scce.rig.hooks.PostResizeVariable")
node StringVariable extends Variable {
	style Variable("${value}")
	attr EString as value := ""
	outgoingEdges (StringAssignment [1, *])
}

@palette("Parameterization")
@icon("assets/icons/play-circle-16x24.png")
@postResize("info.scce.rig.hooks.PostResizeVariable")
node IntVariable extends Variable {
	style Variable ("${value}")
	attr EInt as value
	outgoingEdges (IntAssignment [1, *])
}

@palette("Parameterization")
@icon("assets/icons/play-circle-16x24.png")
@postResize("info.scce.rig.hooks.PostResizeVariable")
node BooleanVariable extends Variable {
	style Variable( "${value}")
	attr EBoolean as value
	outgoingEdges (BooleanAssignment [1, *])
}

// target parameters

abstract node Parameter extends Slot {
	@propertiesViewHidden
	attr EInt as idx := "0"
}

@palette("Parameterization")
@disable(resize, move, create)
@postCreate("info.scce.rig.hooks.parameter.PostCreateParameter")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node StringParameter extends Parameter {
	style Parameter( "${value}")
	attr EString as value := ""
	outgoingEdges (StringAssignment [1, *])
}

@palette("Parameterization")
@disable(resize, move, create)
@postCreate("info.scce.rig.hooks.parameter.PostCreateParameter")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node BooleanParameter extends Parameter {
	style Parameter( "${value}")
	attr EBoolean as value := false
	outgoingEdges (BooleanAssignment [1, *])
}

@palette("Parameterization")
@disable(resize, move, create)
@postCreate("info.scce.rig.hooks.parameter.PostCreateParameter")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node IntParameter extends Parameter {
	style Parameter( "${value}")
	attr EInt as value
	outgoingEdges (IntAssignment [1, *])
}

// properties
	
abstract node Property extends Slot { }

@palette("Property")
@disable(resize, move, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node StringProperty extends Property {
	style Property("", "${value}")
	attr EString as value := ""
	incomingEdges (StringAssignment [0, *])
}

@palette("Property")
@disable(resize, move, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node BooleanProperty extends Property {
	style Property("", "${value}")
	attr EBoolean as value := false
	incomingEdges (BooleanAssignment [0, *])
}

@palette("Property")
@disable(resize, move, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node IntProperty extends Property {
	style Property("", "${value}")
	attr EInt as value
	incomingEdges (IntAssignment [0, *])
}

// job properties

// simple properties (key:val)

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node AllowFailure extends BooleanProperty {
	style Property("AllowFailure", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Coverage extends StringProperty {
	style Property( "Coverage", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Interruptible extends BooleanProperty {
	style Property( "Interruptible", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node ResourceGroup extends StringProperty {
	style Property("Resource Group", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Tag extends StringProperty {
	style Property( "Tag", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Timeout extends StringProperty {
	style Property( "Timeout", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Parallel extends IntProperty {
	style Property( "Parallel", "${value}")
}

// complex properties (hashes)

@palette("Property")
@disable(resize, move, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node ScriptArgument extends StringProperty {
	style Property( "${key}", "${value}")
	attr EString as key := "arg"
	incomingEdges (StringAssignment [0, *])
}

@palette("Job")
@icon("assets/icons/file-archive-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@contextMenuAction("info.scce.rig.hooks.job.artifact.AddName")
@contextMenuAction("info.scce.rig.hooks.job.artifact.AddPath")
@contextMenuAction("info.scce.rig.hooks.job.artifact.AddExclude")
@contextMenuAction("info.scce.rig.hooks.job.artifact.AddExposeAs")
@contextMenuAction("info.scce.rig.hooks.job.artifact.AddExpireIn")
@contextMenuAction("info.scce.rig.hooks.job.artifact.AddWhen")
@contextMenuAction("info.scce.rig.hooks.job.artifact.AddReport")
container Artifact extends Slottable {
	style Artifact( "Artifact")
	containableElements (
		  Name      [0, 1]
		, ExposeAs  [0, 1]
		, Path      [0, *]
		, Exclude   [0, *]
		, ExpireIn  [0, 1]
		, When      [0, 1]
		, Report    [0, *]
		, Untracked [0, 1]
	)
	
	outgoingEdges (ArtifactAssignment [1, *])
}

@palette("Property")
@disable (move, resize, create, delete)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Name extends StringProperty {
	style Property("Name", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node ExposeAs extends StringProperty {
	style Property("Expose As", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Path extends StringProperty {
	style Property( "Path", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Exclude extends StringProperty {
	style Property( "Exclude", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node ExpireIn extends StringProperty {
	style Property( "Expire In", "${value}")
}

enum ReportType {
	junit metrics
	metrics_referee
	network_referee
	dotenv
	cobertura
	cluster_applications
	lsif
	sast
	secret_detection
	dependency_scanning
	container_scanning
	dast 
	license_management
	license_scanning
	accessibility
	codequality
	performance
	browser_performance
	load_performance
	terraform
	requirements
	coverage_fuzzing
	api_fuzzing
}

@palette("Property")
@disable(resize, move, create, delete)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Report extends StringProperty {
	style Property( "${kind}", "${value}")
	attr ReportType as kind
}

@palette("Job")
@icon("assets/icons/exchange-alt-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@contextMenuAction("info.scce.rig.hooks.job.cache.AddKey")
@contextMenuAction("info.scce.rig.hooks.job.cache.AddFile")
@contextMenuAction("info.scce.rig.hooks.job.cache.AddPrefix")
@contextMenuAction("info.scce.rig.hooks.job.cache.AddPath")
@contextMenuAction("info.scce.rig.hooks.job.cache.AddUntracked")
@contextMenuAction("info.scce.rig.hooks.job.cache.AddWhen")
@contextMenuAction("info.scce.rig.hooks.job.cache.AddPolicy")
container Cache extends Slottable {
	style Cache( "Cache")
	containableElements (
		  {Key, Prefix} [0, 1]
		, File      [0, 2]
		
		, Path      [0, *]
		, Untracked [0, 1]
		, When      [0, 1]
		, Policy    [0, 1]
	)
	
	outgoingEdges (CacheAssignment [1, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Key extends StringProperty {
	style Property( "Key", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node File extends StringProperty {
	style Property( "File", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Prefix extends StringProperty {
	style Property( "Prefix", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Untracked extends BooleanProperty {
	style Property( "Untracked", "${value}")
}

enum PolicyValue {pull push pull_push}

@palette("Property")
@disable(resize, move, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node When extends Property {
	style Property( "When", "${value}")
	attr WhenVal as value := always
	// TODO Only (on_success on_failure always) for artifact
}

@palette("Property")
@disable(resize, move, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Policy extends Property {
	style Property( "Policy", "${value}")
	attr PolicyValue as value := pull_push
}

// TODO postcreate : ensure name exists
@palette("Job")
@icon("assets/icons/upload-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@contextMenuAction("info.scce.rig.hooks.job.release.AddName")
@contextMenuAction("info.scce.rig.hooks.job.release.AddTagName")
@contextMenuAction("info.scce.rig.hooks.job.release.AddDescription")
@contextMenuAction("info.scce.rig.hooks.job.release.AddRef")
@contextMenuAction("info.scce.rig.hooks.job.release.AddMilestone")
@contextMenuAction("info.scce.rig.hooks.job.release.AddReleasedAt")
container Release extends Slottable {
	style Release( "Release")
	containableElements (
		  Name        [1, 1]
		, TagName     [1, 1]
		, Description [0, 1]
		, RawRef      [0, 1]
		, Milestone   [0, *]
		, ReleasedAt  [0, 1]
	)
	
	outgoingEdges (ReleaseAssignment [1, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node TagName extends StringProperty {
	style Property("Tag Name", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Description extends StringProperty {
	style Property("Description", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node RawRef extends StringProperty {
	style Property("Ref", "${value}")
}
	
@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Milestone extends StringProperty {
	style Property("Milestone", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node ReleasedAt extends StringProperty {
	style Property("Released at", "${value}")
}

// TODO postCreate: create Name anyways
@palette("Job")
@icon("assets/icons/server-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@contextMenuAction("info.scce.rig.hooks.job.env.AddName")
@contextMenuAction("info.scce.rig.hooks.job.env.AddURL")
@contextMenuAction("info.scce.rig.hooks.job.env.AddAction")
//	@contextMenuAction("info.scce.rig.hooks.job.env.AddOnStop")
@contextMenuAction("info.scce.rig.hooks.job.env.AddAutoStopIn")
container Environment extends Slottable {
	style Environment("Environment")
	containableElements (
		  Name       [0, 1]
		, URL        [0, 1]
//			, OnStop     [0, 1]
		, AutoStopIn [0, 1]
		, EnvAction  [0, 1]
	)
	
	outgoingEdges (EnvironmentAssignment [1, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node URL extends StringProperty {
	style Property("URL", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node AutoStopIn extends StringProperty {
	style Property( "Auto Stop In", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node EnvAction extends Property {
	style Property("Action ", "${value}")
	attr EnvActionVal as value
}

enum EnvActionVal {
	start
	prepare
	stop
}

enum WhenVal {
	on_success
	on_failure
	always
	manual
	delayed
	never
}

@palette("Job")
@icon("assets/icons/docker-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@postCreate("info.scce.rig.hooks.job.PostCreateImage")
@contextMenuAction("info.scce.rig.hooks.job.image.AddEntryPoint")
container Image extends Slottable {
	style Image("Image")
	containableElements (
		  Name       [0, 1]
		, EntryPoint [0, 1]
	)
	
	outgoingEdges (ImageAssignment [1, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node SimpleImage extends StringProperty {
	style Property("Image", "${value}")
}

@palette("Property")
@disable (move, resize, create/* , delete*/)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node EntryPoint extends StringProperty {
	style Property("EntryPoint", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node SimpleService extends StringProperty {
	style Property("Service", "${value}")
}

// TODO postcreate : ensure name exists
@palette("Job")
@icon("assets/icons/docker-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@postCreate("info.scce.rig.hooks.job.PostCreateService")
@contextMenuAction("info.scce.rig.hooks.job.service.AddName")
@contextMenuAction("info.scce.rig.hooks.job.service.AddAlias")
@contextMenuAction("info.scce.rig.hooks.job.service.AddCommand")
@contextMenuAction("info.scce.rig.hooks.job.service.AddEntryPoint")
container Service extends Slottable {
	style Service( "Service")
	containableElements (
		  Name       [0, 1]
		, EntryPoint [0, *]
		, Alias      [0, 1]
		, Command    [0, *]
	)
	
	outgoingEdges (ServiceAssignment [1, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Alias extends StringProperty {
	style Property("Alias", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Command extends StringProperty {
	style Property( "Command", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node SimpleRetry extends IntProperty {
	style Property( "Retry", "${value}")
}

@palette("Job")
@icon("assets/icons/redo-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@contextMenuAction("info.scce.rig.hooks.job.retry.AddMax")
@contextMenuAction("info.scce.rig.hooks.job.retry.AddWhen")
container Retry extends Slottable {
	style Retry( "Retry")
	containableElements (
		  SimpleRetry [0, 1]
		, RetryWhen   [0, 1]
	)
	
	outgoingEdges (RetryAssignment [1, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node RetryWhen extends Property {
	style Property( "When ", "${value}")
	attr RetryWhenValue as value
}

enum RetryWhenValue {
	always
	unknown_failure
	script_failure
	api_failure
	stuck_or_timeout_failure
	runner_system_failure
	missing_dependency_failure
	runner_unsupported
	stale_schedule
	job_execution_timeout
	archived_failure
	unmet_prerequisites
	scheduler_failure
	data_integrity_failure
}


@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node SimpleOnly extends Property {
	style Property( "Only", "${value}")
	
	attr EString as value
	
	incomingEdges (StringAssignment [0, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node SimpleExcept extends Property {
	style Property( "Except", "${value}")
	
	attr EString as value
	
	incomingEdges (StringAssignment [0, *])
}

@palette("Job")
@icon("assets/icons/ban-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
//@contextMenuAction("info.scce.rig.hooks.job.except.AddKeyword")
@contextMenuAction("info.scce.rig.hooks.job.except.AddRef")
@contextMenuAction("info.scce.rig.hooks.job.except.AddChange")
@contextMenuAction("info.scce.rig.hooks.job.except.AddVar")
@contextMenuAction("info.scce.rig.hooks.job.except.AddK8")
container Except extends Slottable {
	style Except( "Except")
	containableElements (
		  Ref             [0, *]
		, VarExp          [0, *]
		, Change          [0, *]
		, Kubernetes      [0, 1]
	)
	
	outgoingEdges (ExceptOnlyAssignment [1, *])
}

@palette("Job")
@icon("assets/icons/exclamation-circle-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
//@contextMenuAction("info.scce.rig.hooks.job.only.AddKeyword")
@contextMenuAction("info.scce.rig.hooks.job.only.AddRef")
@contextMenuAction("info.scce.rig.hooks.job.only.AddChange")
@contextMenuAction("info.scce.rig.hooks.job.only.AddVar")
@contextMenuAction("info.scce.rig.hooks.job.only.AddK8")
container Only extends Slottable {
	style Only( "Only")
	containableElements (
		  Ref             [0, *]
		, VarExp          [0, *]
		, Change          [0, *]
		, Kubernetes      [0, 1]
	)
	
	outgoingEdges (ExceptOnlyAssignment [1, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Ref extends Property {
	style Property( "Ref", "${value}")
	
	attr EString as value
	
	incomingEdges (StringAssignment [0, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node VarExp extends Property {
	style Property("If / Variable", "${value}")
	
	attr EString as value
	
	incomingEdges (StringAssignment [0, *])
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Change extends StringProperty {
	style Property( "Change", "${value}")
}

@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Kubernetes extends BooleanProperty {
	style Property( "Kubernetes", "${value}")
}

@palette("Job")
@icon("assets/icons/section-sign-16x24.png")
@doubleClickAction("info.scce.rig.hooks.slot.DoubleClickSlottable")
@postResize("info.scce.rig.hooks.slot.PostResizeSlottable")
@contextMenuAction("info.scce.rig.hooks.job.rule.AddIf")
@contextMenuAction("info.scce.rig.hooks.job.rule.AddChange")
@contextMenuAction("info.scce.rig.hooks.job.rule.AddExists")
@contextMenuAction("info.scce.rig.hooks.job.rule.AddAllowFailure")
@contextMenuAction("info.scce.rig.hooks.job.rule.AddWhen")
container Rule extends Slottable {
	style Rules( "Rule")
	containableElements (
		  VarExp       [0, 1]
		, Change       [0, *]
		, When         [0, 1]
		, AllowFailure [0, 1]
		, Exists       [0, *]
//			, StartIn      [0, 1]
	)
	
	outgoingEdges (RuleAssignment [1, *])
}


@palette("Property")
@disable (move, resize, create)
@postCreate("info.scce.rig.hooks.slot.PostCreateSlot")
@preDelete("info.scce.rig.hooks.slot.PreDeleteSlot")
node Exists extends StringProperty {
	style Property( "Exists", "${value}")
}

// edges

abstract edge Assignment {}

edge StringAssignment      extends Assignment { style Assignment }
edge BooleanAssignment     extends Assignment { style Assignment }
edge IntAssignment         extends Assignment { style Assignment }
edge ArtifactAssignment    extends Assignment { style Assignment }
edge CacheAssignment       extends Assignment { style Assignment }
edge EnvironmentAssignment extends Assignment { style Assignment }
edge ImageAssignment       extends Assignment { style Assignment }
edge ServiceAssignment     extends Assignment { style Assignment }
edge RetryAssignment       extends Assignment { style Assignment }
edge ReleaseAssignment     extends Assignment { style Assignment }
edge ExceptOnlyAssignment  extends Assignment { style Assignment }
edge RuleAssignment        extends Assignment { style Assignment }